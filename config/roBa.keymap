#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

&mt {
    flavor = "balanced";
    quick-tap-ms = <0>;
};

&trackball {
    automouse-layer = <4>;
    scroll-layers = <5>;

    // arrows {
    //     layers = <3>;
    //     bindings =
    //         <&kp RIGHT_ARROW>,
    //         <&kp LEFT_ARROW>,
    //         <&kp UP_ARROW>,
    //         <&kp DOWN_ARROW>;
    //     tick = <10>;
    //     wait-ms = <5>;
    //     tap-ms = <5>;
    // };
};

/ {
    combos {
        compatible = "zmk,combos";

        tab {
            bindings = <&kp TAB>;
            key-positions = <11 12>;
        };

        shift_tab {
            bindings = <&kp LS(TAB)>;
            key-positions = <12 13>;
        };

        double_quotation {
            bindings = <&kp DOUBLE_QUOTES>;
            key-positions = <20 21>;
        };

        eq {
            bindings = <&kp EQUAL>;
            key-positions = <24 25>;
        };
    };

    macros {
        EqualBackslash: EqualDollar {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp KP_EQUAL &kp RS(BACKSLASH)>;
            label = "EQUALDOLLAR";
        };

        LeftparenthesisUnderscore: CollonSemicollon {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LEFT_PARENTHESIS &kp RS(UNDERSCORE)>;
            label = "COLLONSEMICOLLON";
        };

        LeftbraceAmpersand: LeftbraceAmpersand {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LEFT_BRACE &kp RS(AMPERSAND)>;
            label = "LEFTBRACEAMPERSAND";
        };

        AtsignMinus: AtsignMinus {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp AT_SIGN &kp RS(MINUS)>;
            label = "ATSIGNMINUS";
        };

        TildeDollar: TildeDollar {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp TILDE &kp RS(DOLLAR)>;
            label = "TILDEDOLLAR";
        };

        ExclamationPercent: ExclamationPercent {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp EXCLAMATION &kp RS(PERCENT)>;
            label = "EXCLAMATIONPERCENT";
        };

        RightparenthesisPlus: RightparenthesisPlus {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp RIGHT_PARENTHESIS &kp RS(PLUS)>;
            label = "RIGHTPARENTHESISPLUS";
        };

        RightbraceAsterisk: RightbraceAsterisk {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp RIGHT_BRACE &kp RS(ASTERISK)>;
            label = "RIGHTBRACEASTERISK";
        };

        SlashApostrophe: SlashApostropheQuote {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp KP_SLASH &kp RS(APOSTROPHE)>;
            label = "SLASHAPOSTROPHEQUOTE";
        };

        RightbracketQuote: RightbracketQuote {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp RIGHT_BRACKET &kp RS(DOUBLE_QUOTES)>;
            label = "RIGHTBRACKETQUOTE";
        };

        SpacePipe: SpacePipe {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp SPACE &kp RS(PIPE)>;
            label = "SPACEPIPE";
        };

        BackspaceCaret: BackspaceCaret {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp BACKSPACE &kp RS(CARET)>;
            label = "BACKSPACECARET";
        };

        Language: Language {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LANGUAGE_1 &kp RS(LANGUAGE_2)>;
            label = "LANGUAGE";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp Q       &kp W           &kp E    &kp R      &kp B                                                           &kp J      &kp U  &kp I          &kp O             &kp P
&kp A       &kp D           &kp F    &kp Z      &kp C           &mt LANGUAGE_2 LANGUAGE_1      &kp INT_HENKAN   &kp H      &kp Y  &kp K          &lt 5 L           &kp BACKSPACE
&kp G       &kp X           &kp T    &kp S      &kp V           &kp LEFT_ALT                   &kp ENTER        &kp N      &kp M  &kp LESS_THAN  &kp GREATER_THAN  &kp SPACE
&bt BT_NXT  &bt BT_CLR_ALL  &kp ESC  &lt 2 TAB  &lt 1 LEFT_GUI  &kp LCTRL                      &kp RIGHT_SHIFT  &kp ENTER                                          &kp DEL
            >;

            sensor-bindings = <&inc_dec_kp PG_UP PAGE_DOWN>;
        };

        SIGN {
            bindings = <
&trans      &kp KP_MINUS       &kp AMPERSAND  &kp AT_SIGN           &kp SLASH                                                   &kp HASH        &kp RIGHT_BRACKET  &kp QUESTION      &kp BACKSLASH         &trans
&kp CARET   &kp COLON          &kp UNDER      &kp KP_SLASH          &kp COMMA   &mt LANGUAGE_2 LANGUAGE_1      &kp PLUS         &kp UNDERSCORE  &kp ASTERISK       &kp LEFT_BRACKET  &kp LEFT_PARENTHESIS  &kp BACKSPACE
&kp DOLLAR  &kp DOUBLE_QUOTES  &kp PERCENT    &kp NON_US_BACKSLASH  &kp PERIOD  &kp LEFT_ALT                   &kp ENTER        &kp APOSTROPHE  &kp RIGHT_BRACE    &kp EXCLAMATION   &kp PIPE              &kp SPACE
&kp PIPE2   &kp SEMICOLON      &kp CARET      &trans                &trans      &trans                         &kp RIGHT_SHIFT  &trans                                                                     &kp DELETE
            >;
        };

        NUM {
            bindings = <
&trans  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &trans                                                        &trans  &trans          &kp UP_ARROW    &trans           &trans
&trans  &kp NUMBER_4  &kp NUMBER_5  &kp NUMBER_6  &kp NUMBER_0  &mt LANGUAGE_2 LANGUAGE_1      &trans           &kp F4  &kp LEFT_ARROW  &kp F2          &kp RIGHT_ARROW  &kp BACKSPACE
&trans  &kp NUMBER_7  &kp NUMBER_8  &kp NUMBER_9  &trans        &kp LEFT_ALT                   &kp ENTER        &trans  &trans          &kp DOWN_ARROW  &trans           &kp SPACE
&trans  &trans        &trans        &trans        &trans        &trans                         &kp RIGHT_SHIFT  &trans                                                   &kp DELETE
            >;
        };

        ARROW {
            bindings = <
&kp ESCAPE      &kp LC(LS(TAB))         &kp UP_ARROW    &kp LC(TAB)              &trans                       &trans  &trans  &trans  &trans  &trans
&kp HOME        &kp LEFT_ARROW          &kp DOWN_ARROW  &kp RIGHT_ARROW          &kp END  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&kp LEFT_SHIFT  &kp LG(LS(LEFT_ARROW))  &trans          &kp LG(LS(RIGHT_ARROW))  &trans   &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans          &trans                  &trans          &trans                   &trans   &trans      &trans  &trans                          &trans
            >;

            sensor-bindings = <&inc_dec_kp LC(PAGE_UP) LC(PAGE_DOWN)>;
        };

        MOUSE {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &trans  &trans    &trans    &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &mkp MB2  &mkp MB1  &mo 5   &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans    &trans    &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                              &trans
            >;
        };

        SCROLL {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                          &trans
            >;
        };
    };
};
