#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

&mt {
    flavor = "balanced";
    quick-tap-ms = <0>;
};

&trackball {
    automouse-layer = <4>;
    scroll-layers = <5>;

    // arrows {
    //     layers = <3>;
    //     bindings =
    //         <&kp RIGHT_ARROW>,
    //         <&kp LEFT_ARROW>,
    //         <&kp UP_ARROW>,
    //         <&kp DOWN_ARROW>;
    //     tick = <10>;
    //     wait-ms = <5>;
    //     tap-ms = <5>;
    // };
};

/ {
    combos {
        compatible = "zmk,combos";

        tab {
            bindings = <&kp TAB>;
            key-positions = <11 12>;
        };

        shift_tab {
            bindings = <&kp LS(TAB)>;
            key-positions = <12 13>;
        };

        double_quotation {
            bindings = <&kp DOUBLE_QUOTES>;
            key-positions = <20 21>;
        };

        eq {
            bindings = <&kp EQUAL>;
            key-positions = <24 25>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp Q       &kp W           &kp E    &kp R      &kp B                                                           &kp J      &kp U  &kp I          &kp O             &kp P
&kp A       &kp D           &kp F    &kp Z      &kp C           &mt LANGUAGE_2 LANGUAGE_1      &kp SPACE        &kp H      &kp Y  &kp K          &lt 5 L           &kp BACKSPACE
&kp G       &kp X           &kp T    &kp S      &kp V           &kp LEFT_ALT                   &kp ENTER        &kp N      &kp M  &kp LESS_THAN  &kp GREATER_THAN  &kp SPACE
&bt BT_NXT  &bt BT_CLR_ALL  &kp ESC  &lt 2 TAB  &lt 1 LEFT_GUI  &kp LCTRL                      &kp RIGHT_SHIFT  &kp ENTER                                          &kp DEL
            >;

            sensor-bindings = <&inc_dec_kp PG_UP PAGE_DOWN>;
        };

        Symbol {
            bindings = <
&none          &kp KP_MINUS   &kp APOSTROPHE  &kp DOUBLE_QUOTES     &kp SLASH                                                   &kp HASH   &kp LEFT_BRACKET      &kp QUESTION     &kp RIGHT_BRACKET      &none
&kp AMPERSAND  &kp PLUS       &kp UNDER       &kp KP_SLASH          &kp COMMA   &mt LANGUAGE_2 LANGUAGE_1      &kp TILDE        &kp EQUAL  &kp LEFT_PARENTHESIS  &kp AT_SIGN      &kp RIGHT_PARENTHESIS  &kp BACKSPACE
&kp DOLLAR     &kp ASTERISK   &kp PERCENT     &kp NON_US_BACKSLASH  &kp PERIOD  &kp LEFT_ALT                   &kp ENTER        &kp COLON  &kp LEFT_BRACE        &kp EXCLAMATION  &kp RIGHT_BRACE        &kp SPACE
&kp PIPE       &kp SEMICOLON  &kp CARET       &none                 &none       &none                          &kp RIGHT_SHIFT  &none                                                                    &kp DELETE
            >;
        };

        NUM {
            bindings = <
&none  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &none                                                         &kp C_BRIGHTNESS_INC  &kp K_VOLUME_UP    &kp UP_ARROW    &kp RG(A)        &none
&none  &kp NUMBER_4  &kp NUMBER_5  &kp NUMBER_6  &kp NUMBER_0  &mt LANGUAGE_2 LANGUAGE_1      &kp RIGHT_GUI    &kp F4                &kp LEFT_ARROW     &kp F2          &kp RIGHT_ARROW  &kp BACKSPACE
&none  &kp NUMBER_7  &kp NUMBER_8  &kp NUMBER_9  &none         &kp LEFT_ALT                   &kp ENTER        &kp C_BRIGHTNESS_DEC  &kp K_VOLUME_DOWN  &kp DOWN_ARROW  &none            &kp SPACE
&none  &none         &none         &none         &none         &none                          &kp RIGHT_SHIFT  &none                                                                     &kp DELETE
            >;
        };

        ARROW {
            bindings = <
&kp ESCAPE      &kp LC(LS(TAB))         &kp UP_ARROW    &kp LC(TAB)              &trans                       &trans  &trans  &trans  &trans  &trans
&kp HOME        &kp LEFT_ARROW          &kp DOWN_ARROW  &kp RIGHT_ARROW          &kp END  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&kp LEFT_SHIFT  &kp LG(LS(LEFT_ARROW))  &trans          &kp LG(LS(RIGHT_ARROW))  &trans   &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans          &trans                  &trans          &trans                   &trans   &trans      &trans  &trans                          &trans
            >;

            sensor-bindings = <&inc_dec_kp LC(PAGE_UP) LC(PAGE_DOWN)>;
        };

        MOUSE {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &none   &none     &none     &none  &none
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &none   &mkp MB2  &mkp MB1  &mo 5  &none
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &none   &none     &none     &none  &none
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                             &trans
            >;
        };

        SCROLL {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                          &trans
            >;
        };
    };
};
